{"ast":null,"code":"import configs from '@/constants/configs';\nimport messages from '@/constants/messages';\nimport formatter from '@/utils/formatter';\nexport default {\n  data() {\n    return {\n      pageSize: configs.PAGE_SIZE,\n      headerStyle: {\n        verticalAlign: 'top',\n        lineHeight: '22px'\n      }\n    };\n  },\n\n  props: {\n    columns: {\n      required: true,\n      type: Array\n    },\n    acoes: {\n      required: false,\n      type: Array\n    },\n    pageable: {\n      required: false,\n      type: Object\n    },\n    defaultSort: {\n      required: false,\n      type: Object\n    },\n    icon: {\n      type: Boolean,\n      default: false\n    },\n    selectionColumn: {\n      type: Boolean,\n      default: false\n    },\n    showStatusDataEsperada: {\n      type: Boolean,\n      default: false\n    },\n    checkWarningAlmoxarifado: {\n      type: Boolean,\n      default: false\n    },\n    data: {\n      required: true,\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    getMessageNotFound() {\n      return messages.RESULTADOS_NAO_ENCONTRADOS;\n    }\n\n  },\n  methods: {\n    sort(data) {\n      const ordenacaoFiltro = {\n        ordem: data.prop,\n        ordemDirecao: null\n      };\n\n      if (data.order === 'ascending') {\n        ordenacaoFiltro.ordemDirecao = 'ASC';\n      } else {\n        ordenacaoFiltro.ordemDirecao = 'DESC';\n      }\n\n      this.$emit('sort', { ...ordenacaoFiltro\n      });\n    },\n\n    showIcon(row) {\n      const arrayProps = this.acoes[0].propShowAcao.split('.');\n\n      if (this.acoes[0].propShowAcao) {\n        for (let index = 0; index < arrayProps.length; index++) {\n          return !!row[arrayProps[0]][arrayProps[1]];\n        }\n      }\n\n      return false;\n    },\n\n    showColumnByEstoque(row = false) {\n      const isColumnEstoque = row.estoque.quantidade < row.estoque.minimo;\n      return isColumnEstoque;\n    },\n\n    buttonAction(row, action, index) {\n      this.$emit(action.toLowerCase(), row, index);\n    },\n\n    atualizarTabela(newPage) {\n      this.$emit('atualizarTabela', newPage);\n    },\n\n    getStringResultados() {\n      if (this.pageable.pageable) {\n        return `Exibindo de ${this.pageable.pageable.offset + 1}\n          até ${this.pageable.pageable.offset + this.pageable.numberOfElements}\n          de ${this.pageable.totalElements} registros`;\n      }\n    },\n\n    showActionByStatus(row, statusShow) {\n      let showAction = true;\n\n      if (statusShow) {\n        showAction = statusShow.includes(row.situacao.codigo || row.status);\n      }\n\n      return showAction;\n    },\n\n    showAtivadoDesativado(row, acao) {\n      if (row.ativo != null) {\n        if (row.ativo) {\n          switch (acao.codigo) {\n            case 'ATIVAR':\n              return false;\n\n            default:\n              return true;\n          }\n        } else {\n          switch (acao.codigo) {\n            case 'ATIVAR':\n              return true;\n\n            case 'VISUALIZAR':\n              return true;\n\n            default:\n              return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    select(selection, row) {\n      this.$emit('setRow', row, !row.ativo, selection);\n    },\n\n    selectAll(selection) {\n      this.$emit('selectAll', selection);\n    },\n\n    getRowKey(row) {\n      return row.id;\n    },\n\n    getClass(date) {\n      if (date) {\n        const now = new Date();\n        const dataToCompare = formatter.stringToDate(date);\n        dataToCompare.setDate(dataToCompare.getDate() + 1);\n        const nowToCompareWithFiveLessDays = formatter.stringToDate(date);\n        nowToCompareWithFiveLessDays.setDate(nowToCompareWithFiveLessDays.getDate() + 1);\n        nowToCompareWithFiveLessDays.setDate(nowToCompareWithFiveLessDays.getDate() - 5);\n\n        if (dataToCompare.getTime() < now.getTime()) {\n          return 'red';\n        }\n\n        if (now.getTime() <= nowToCompareWithFiveLessDays.getTime()) {\n          return 'green';\n        }\n\n        return 'yellow';\n      }\n    },\n\n    getToolTip(date) {\n      return date ? `Prazo previsto: ${date}` : 'Prazo previsto ainda não definido';\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAwEA;AACA;AACA;AAEA;EAEAA;IACA;MACAC,2BADA;MAEAC;QACAC,oBADA;QAEAC;MAFA;IAFA;EAOA,CAVA;;EAWAC;IACAC;MACAC,cADA;MAEAC;IAFA,CADA;IAKAC;MACAF,eADA;MAEAC;IAFA,CALA;IASAE;MACAH,eADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,eADA;MAEAC;IAFA,CAbA;IAiBAI;MACAJ,aADA;MAEAK;IAFA,CAjBA;IAqBAC;MACAN,aADA;MAEAK;IAFA,CArBA;IAyBAE;MACAP,aADA;MAEAK;IAFA,CAzBA;IA6BAG;MACAR,aADA;MAEAK;IAFA,CA7BA;IAiCAb;MACAO,cADA;MAEAC,WAFA;MAGAK;IAHA;EAjCA,CAXA;EAkDAI;IACAC;MACA;IACA;;EAHA,CAlDA;EAuDAC;IACAC;MACA;QACAC,gBADA;QAEAC;MAFA;;MAKA;QACAC;MACA,CAFA,MAEA;QACAA;MACA;;MAEA;MAAA;IACA,CAdA;;IAeAC;MACA;;MACA;QACA;UACA;QACA;MACA;;MACA;IACA,CAvBA;;IAwBAC;MACA,wBACAC,2CADA;MAEA;IACA,CA5BA;;IA6BAC;MACA;IACA,CA/BA;;IAgCAC;MACA;IACA,CAlCA;;IAmCAC;MACA;QACA;AACA;AACA,sDAFA;MAGA;IACA,CAzCA;;IA0CAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAhDA;;IAiDAC;MACA;QACA;UACA;YACA;cACA;;YACA;cACA;UAJA;QAMA,CAPA,MAOA;UACA;YACA;cACA;;YACA;cACA;;YACA;cACA;UANA;QAQA;MACA;;MACA;IACA,CAtEA;;IAwEAC;MACA;IACA,CA1EA;;IA4EAC;MACA;IACA,CA9EA;;IAgFAC;MACA;IACA,CAlFA;;IAoFAC;MACA;QACA;QACA;QACAC;QACA;QACAC,qCACAA,0CADA;QAGAA,qCACAA,0CADA;;QAIA;UACA;QACA;;QACA;UACA;QACA;;QAEA;MACA;IACA,CA1GA;;IA2GAC;MACA,cACA,yBADA,GAEA,mCAFA;IAGA;;EA/GA;AAvDA","names":["data","pageSize","headerStyle","verticalAlign","lineHeight","props","columns","required","type","acoes","pageable","defaultSort","icon","default","selectionColumn","showStatusDataEsperada","checkWarningAlmoxarifado","computed","getMessageNotFound","methods","sort","ordem","ordemDirecao","ordenacaoFiltro","showIcon","showColumnByEstoque","row","buttonAction","atualizarTabela","getStringResultados","showActionByStatus","showAction","showAtivadoDesativado","select","selectAll","getRowKey","getClass","dataToCompare","nowToCompareWithFiveLessDays","getToolTip"],"sourceRoot":"src/components","sources":["DataTableFin.vue"],"sourcesContent":["<template lang=\"pug\">\r\ndiv(class=\"fornecedores\")\r\n    el-table.table(\r\n      :data=\"data\"\r\n      :default-sort=\"defaultSort\"\r\n      :header-cell-style=\"headerStyle\"\r\n      @select=\"select\"\r\n      @select-all=\"selectAll\"\r\n      :row-key=\"getRowKey\"\r\n      @sort-change=\"sort\"\r\n    )\r\n      template(slot=\"empty\") {{getMessageNotFound}}\r\n      el-table-column(\r\n        \r\n        v-if=\"selectionColumn\"\r\n        type=\"selection\",\r\n        :reserve-selection=\"true\"\r\n      )\r\n      el-table-column(\r\n        v-if=\"checkWarningAlmoxarifado\"\r\n        width=\"35\"\r\n      )\r\n        template(slot-scope=\"scope\")\r\n          el-tooltip(\r\n            v-if=\"scope.row.icone === 'ZERADO'\"\r\n            content=\"Estoque Zerado\"\r\n          )\r\n\r\n          el-tooltip(\r\n            v-if=\"scope.row.icone === 'ALERTA'\"\r\n            placement=\"top\" effect=\"light\"\r\n          )\r\n\r\n      el-table-column(\r\n        v-for=\"col in columns\"\r\n        :prop=\"col.prop\"\r\n        :label=\"col.label\"\r\n        :key=\"col.prop\"\r\n        :sortable=\"col.order\"\r\n        :formatter=\"typeof col.formatter === 'function' ? col.formatter : null\"\r\n      )\r\n      el-table-column(\r\n        fixed=\"right\"\r\n        v-if=\"acoes && acoes.length > 1\",\r\n        label=\"Ações\",\r\n        width=\"140\",\r\n        header-align=\"center\",\r\n        align=\"center\"\r\n      )\r\n        template(slot-scope=\"scope\")\r\n          el-button(v-for=\"acao in acoes\", :key=\"acao.text\", @click.native=\"buttonAction(scope.row, acao.codigo)\" type=\"text\" size=\"small\")\r\n            div(style=\"display:flex;align-items:center\")\r\n              i.textButton(:class=\"acao.icon\") {{acao.text}}\r\n      //- APPEND DA TABELA\r\n      template(slot=\"append\")\r\n        slot(name=\"appendTable\")\r\n\r\n    //- COMPONENT FOOTER\r\n    div.footer(v-if=\"pageable && pageable.pageable && !pageable.empty\")\r\n      span.bold {{getStringResultados()}}\r\n      el-pagination(\r\n        :page-size=\"pageable.pageable.pageSize\",\r\n        :current-page=\"pageable.pageNumber + 1\"\r\n        :total=\"pageable.totalElements\",\r\n        layout=\"prev, pager, next\",\r\n        small,\r\n        align=\"right\"\r\n        @current-change=\"atualizarTabela\"\r\n      )\r\n</template>\r\n\r\n<script>\r\nimport configs from '@/constants/configs';\r\nimport messages from '@/constants/messages';\r\nimport formatter from '@/utils/formatter';\r\n\r\nexport default {\r\n\r\n  data() {\r\n    return {\r\n      pageSize: configs.PAGE_SIZE,\r\n      headerStyle: {\r\n        verticalAlign: 'top',\r\n        lineHeight: '22px'\r\n      }\r\n    };\r\n  },\r\n  props: {\r\n    columns: {\r\n      required: true,\r\n      type: Array\r\n    },\r\n    acoes: {\r\n      required: false,\r\n      type: Array\r\n    },\r\n    pageable: {\r\n      required: false,\r\n      type: Object\r\n    },\r\n    defaultSort: {\r\n      required: false,\r\n      type: Object\r\n    },\r\n    icon: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    selectionColumn: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showStatusDataEsperada: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    checkWarningAlmoxarifado: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    data: {\r\n      required: true,\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  computed: {\r\n    getMessageNotFound() {\r\n      return messages.RESULTADOS_NAO_ENCONTRADOS;\r\n    }\r\n  },\r\n  methods: {\r\n    sort(data) {\r\n      const ordenacaoFiltro = {\r\n        ordem: data.prop,\r\n        ordemDirecao: null\r\n      };\r\n\r\n      if (data.order === 'ascending') {\r\n        ordenacaoFiltro.ordemDirecao = 'ASC';\r\n      } else {\r\n        ordenacaoFiltro.ordemDirecao = 'DESC';\r\n      }\r\n\r\n      this.$emit('sort', { ...ordenacaoFiltro });\r\n    },\r\n    showIcon(row) {\r\n      const arrayProps = this.acoes[0].propShowAcao.split('.');\r\n      if (this.acoes[0].propShowAcao) {\r\n        for (let index = 0; index < arrayProps.length; index++) {\r\n          return !!row[arrayProps[0]][arrayProps[1]];\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    showColumnByEstoque(row = false) {\r\n      const isColumnEstoque =\r\n        row.estoque.quantidade < row.estoque.minimo;\r\n      return isColumnEstoque;\r\n    },\r\n    buttonAction(row, action, index) {\r\n      this.$emit(action.toLowerCase(), row, index);\r\n    },\r\n    atualizarTabela(newPage) {\r\n      this.$emit('atualizarTabela', newPage);\r\n    },\r\n    getStringResultados() {\r\n      if (this.pageable.pageable) {\r\n        return `Exibindo de ${this.pageable.pageable.offset + 1}\r\n          até ${this.pageable.pageable.offset + this.pageable.numberOfElements}\r\n          de ${this.pageable.totalElements} registros`;\r\n      }\r\n    },\r\n    showActionByStatus(row, statusShow) {\r\n      let showAction = true;\r\n      if (statusShow) {\r\n        showAction = statusShow.includes(row.situacao.codigo || row.status);\r\n      }\r\n      return showAction;\r\n    },\r\n    showAtivadoDesativado(row, acao) {\r\n      if (row.ativo != null) {\r\n        if (row.ativo) {\r\n          switch (acao.codigo) {\r\n            case 'ATIVAR':\r\n              return false;\r\n            default:\r\n              return true;\r\n          }\r\n        } else {\r\n          switch (acao.codigo) {\r\n            case 'ATIVAR':\r\n              return true;\r\n            case 'VISUALIZAR':\r\n              return true;\r\n            default:\r\n              return false;\r\n          }\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n\r\n    select(selection, row) {\r\n      this.$emit('setRow', row, !row.ativo, selection);\r\n    },\r\n\r\n    selectAll(selection) {\r\n      this.$emit('selectAll', selection);\r\n    },\r\n\r\n    getRowKey(row) {\r\n      return row.id;\r\n    },\r\n\r\n    getClass(date) {\r\n      if (date) {\r\n        const now = new Date();\r\n        const dataToCompare = formatter.stringToDate(date);\r\n        dataToCompare.setDate(dataToCompare.getDate() + 1);\r\n        const nowToCompareWithFiveLessDays = formatter.stringToDate(date);\r\n        nowToCompareWithFiveLessDays.setDate(\r\n          nowToCompareWithFiveLessDays.getDate() + 1\r\n        );\r\n        nowToCompareWithFiveLessDays.setDate(\r\n          nowToCompareWithFiveLessDays.getDate() - 5\r\n        );\r\n\r\n        if (dataToCompare.getTime() < now.getTime()) {\r\n          return 'red';\r\n        }\r\n        if (now.getTime() <= nowToCompareWithFiveLessDays.getTime()) {\r\n          return 'green';\r\n        }\r\n\r\n        return 'yellow';\r\n      }\r\n    },\r\n    getToolTip(date) {\r\n      return date\r\n        ? `Prazo previsto: ${date}`\r\n        : 'Prazo previsto ainda não definido';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n\r\n.icon {\r\n  margin-right: 12px;\r\n  color: #366efa;\r\n}\r\n* {\r\n  color: black;\r\n  font-weight: bold;\r\n}\r\n\r\n.iconExclamation {\r\n  margin-right: 12px;\r\n  color: #ffb703;\r\n}\r\n\r\n.dropdown {\r\n  font-weight: bold;\r\n  border-color: #707070;\r\n}\r\n\r\n.footer {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 1.5em;\r\n}\r\n\r\n.soloIcon {\r\n  color: #366efa;\r\n  font-size: 15px;\r\n  cursor: pointer;\r\n}\r\n\r\n.table {\r\n  width: 100%;\r\n}\r\n\r\n.el-table .cell {\r\n  word-break: break-word;\r\n}\r\n\r\n.fa-trash-alt {\r\n  color: red;\r\n}\r\n\r\n.red {\r\n  color: red;\r\n}\r\n\r\n.green {\r\n  color: green;\r\n}\r\n\r\n.yellow {\r\n  color: yellow;\r\n}\r\n\r\n.bold {\r\n  font-weight: bold;\r\n  color: #555555;\r\n}\r\n\r\n.textButton{\r\n  color: #343E59;\r\n  font-weight: bolder;\r\n  font-size: 13px;\r\n}\r\n.textButton:hover{\r\n  color: #1313d3;\r\n  font-weight: bolder;\r\n  text-decoration: underline;\r\n}\r\n\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}